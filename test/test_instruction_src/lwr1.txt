#15
#lwr1
#lwr
#Testing functionality || Dependencies: lui ori sw addiu slt or sll jr

#initialise memory to be accessed
lui $3, 0xAAAA
ori $3, $3, 0xAAAA
lui $20, 0x2000
sw $3, 0x0000($20)


#set reg 24, to be overwritten to some degree
lui $24, 0x5555
ori $24, $24, 0x5555 

#to be used in future calls
lui $3, 0x2000
#load word
lwr $24, 0x0($20)


#set r2 to 0000 0001 if successful
lui $6, 0x5555
addiu $6, $6, 0x55AB
subu $2, $6, $24

#set reg 24; to be overwritten to some degree
lui $24, 0x5555
ori $24, $24, 0x5555 

#load word
lwr $24, 0x1($20)

#set r2 to 0000 001X if successful
lui $6, 0x5555
ori $6, $6, 0xAAAB
subu $4, $6, $24
sll $4, $4, 0x1
or $2, $2, $4

#set reg 24, to be overwritten to some degree
lui $24, 0x5555
ori $24, $24, 0x5555 

#load word
lwr $24, 0x2($20)

#set r2 to 0000 01XX if succesful
lui $6, 0x55AA
ori $6, $6, 0xAAAB
subu $4, $6, $24
sll $4, $4, 0x2
or $2, $2, $4

#set reg 24, to be overwritten to some degree
lui $24, 0x5555
ori $24, $24, 0x5555 

#load word
lwr $24, 0x3($20)

#set r2 to 0000 1XXX if successful
lui $6, 0xAAAA
ori $6, $6, 0xAAAB
subu $4, $6, $24
sll $4, $4, 0x3
or $2, $2, $4


jr $0
nop 